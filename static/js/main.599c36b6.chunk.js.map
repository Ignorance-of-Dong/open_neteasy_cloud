{"version":3,"sources":["views/PgWrong/index.tsx","router/index.ts","serviceWorker.js","index.js","App.js"],"names":["Wrong","config","path","component","React","lazy","exact","Boolean","window","location","hostname","match","ReactDOM","render","fallback","from","to","routerConfig","map","item","ind","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6HAAA,iEACe,SAASA,IAAS,OAAO,sC,iLCOzB,G,MAAA,CACXC,OAAQ,CACJ,CACIC,KAAM,QACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,cACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,iBACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,SACNC,UAAWC,IAAMC,KAAK,kBAAM,0CAC5BC,OAAO,M,QChBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCAD,WAEX,OAAO,kBAAC,IAAD,KACH,kBAAC,WAAD,CAAUC,SAAU,+BAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUR,OAAK,EAACS,KAAK,IAAIC,GAAG,UAExBC,EAAahB,OAAOiB,IAAI,SAACC,EAAMC,GAE3B,OAAO,kBAAC,IAAD,CAAOd,MAAOa,EAAKb,MAAOe,IAAKD,EAAKlB,KAAMiB,EAAKjB,KAAMW,OAAQ,SAACJ,GAGjE,OAAO,kBAACU,EAAKhB,UAAcM,QAIvC,kBAAC,IAAD,CAAON,UAAWH,gBDhBlB,MAASsB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.599c36b6.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function Wrong() {return <div>404</div>}\r\n","/*\r\n * @Author: Mr.zheng\r\n * @Date: 2019-08-09 14:32:22\r\n * @LastEditors: OBKoro1\r\n * @LastEditTime: 2019-08-09 14:45:33\r\n * @Description: \r\n */\r\nimport React from 'react'\r\nexport default {\r\n    config: [\r\n        {\r\n            path: \"/home\",\r\n            component: React.lazy(() => import('../views/PgHome')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/loginphone\",\r\n            component: React.lazy(() => import('../views/PgLogin/PgPhoneInput')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/loginpassword\",\r\n            component: React.lazy(() => import('../views/PgLogin/PgPasswordInput')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/wrong\",\r\n            component: React.lazy(() => import('../views/PgWrong')),\r\n            exact: true\r\n        },\r\n    ]\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Suspense } from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\r\nimport './App.css'\r\nimport routerConfig from './router'\r\nimport Wrong from './views/PgWrong'//404页面\r\n\r\nexport default () => {\r\n\r\n    return <HashRouter>\r\n        <Suspense fallback={<div></div>}>\r\n            <Switch>\r\n                <Redirect exact from='/' to=\"/home\" />\r\n                {\r\n                    routerConfig.config.map((item, ind) => {\r\n\r\n                        return <Route exact={item.exact} key={ind} path={item.path} render={(location) => {\r\n                            // Store.getHistory({...location})\r\n                            // commonStore.getHistory({...location})\r\n                            return <item.component {...location} />\r\n                        }} />\r\n                    })\r\n                }\r\n                <Route component={Wrong} />\r\n            </Switch>\r\n        </Suspense>\r\n    </HashRouter>\r\n};"],"sourceRoot":""}