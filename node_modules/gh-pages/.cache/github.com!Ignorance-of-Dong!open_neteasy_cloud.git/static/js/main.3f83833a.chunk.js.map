{"version":3,"sources":["views/PgWrong/index.tsx","router/index.ts","serviceWorker.js","index.tsx","App.tsx"],"names":["Wrong","config","path","component","React","lazy","exact","Boolean","window","location","hostname","match","ReactDOM","render","fallback","from","to","routerConfig","map","item","ind","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6HAAA,iEACe,SAASA,IAAS,OAAO,sC,iLCOzB,G,MAAA,CACXC,OAAQ,CACJ,CACIC,KAAM,QACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,cACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,iBACNC,UAAWC,IAAMC,KAAK,kBAAM,+BAC5BC,OAAO,GAEX,CACIJ,KAAM,SACNC,UAAWC,IAAMC,KAAK,kBAAM,0CAC5BC,OAAO,M,QChBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCAD,WAEX,OAAO,kBAAC,IAAD,KACH,kBAAC,WAAD,CAAUC,SAAU,+BAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUR,OAAK,EAACS,KAAK,IAAIC,GAAG,UAExBC,EAAahB,OAAOiB,IAAI,SAACC,EAAMC,GAE3B,OAAO,kBAAC,IAAD,CAAOd,MAAOa,EAAKb,MAAOe,IAAKD,EAAKlB,KAAMiB,EAAKjB,KAAMW,OAAQ,SAACJ,GAGjE,OAAO,kBAACU,EAAKhB,UAAcM,QAIvC,kBAAC,IAAD,CAAON,UAAWH,gBDhBlB,MAASsB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f83833a.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function Wrong() {return <div>404</div>}\r\n","/*\r\n * @Author: Mr.zheng\r\n * @Date: 2019-08-09 14:32:22\r\n * @LastEditors: OBKoro1\r\n * @LastEditTime: 2019-08-09 14:45:33\r\n * @Description: \r\n */\r\nimport React from 'react'\r\nexport default {\r\n    config: [\r\n        {\r\n            path: \"/home\",\r\n            component: React.lazy(() => import('../views/PgHome')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/loginphone\",\r\n            component: React.lazy(() => import('../views/PgLogin/PgPhoneInput')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/loginpassword\",\r\n            component: React.lazy(() => import('../views/PgLogin/PgPasswordInput')),\r\n            exact: true\r\n        },\r\n        {\r\n            path: \"/wrong\",\r\n            component: React.lazy(() => import('../views/PgWrong')),\r\n            exact: true\r\n        },\r\n    ]\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Suspense } from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\r\nimport './App.css'\r\nimport routerConfig from './router'\r\nimport Wrong from './views/PgWrong'//404页面\r\n\r\nexport default () => {\r\n\r\n    return <HashRouter>\r\n        <Suspense fallback={<div></div>}>\r\n            <Switch>\r\n                <Redirect exact from='/' to=\"/home\" />\r\n                {\r\n                    routerConfig.config.map((item, ind) => {\r\n\r\n                        return <Route exact={item.exact} key={ind} path={item.path} render={(location) => {\r\n                            // Store.getHistory({...location})\r\n                            // commonStore.getHistory({...location})\r\n                            return <item.component {...location} />\r\n                        }} />\r\n                    })\r\n                }\r\n                <Route component={Wrong} />\r\n            </Switch>\r\n        </Suspense>\r\n    </HashRouter>\r\n};"],"sourceRoot":""}